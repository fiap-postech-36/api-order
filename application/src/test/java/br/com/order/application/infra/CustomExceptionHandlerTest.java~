package br.com.order.application.infra;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.List;

import static org.hamcrest.Matchers.is;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

class CustomExceptionHandlerTest {

    //@Autowired
    private MockMvc mockMvc;

    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders.standaloneSetup(new CustomExceptionHandler()).build();
    }

    @Test
    void testHandleBadRequest_CustomerAlreadyExistsException() throws Exception {
        // Simula o lançamento da exceção CustomerAlreadyExistsException
        String errorMessage = "Customer already exists";
        mockMvc.perform(get("/some-endpoint") // Substitua com um endpoint válido
                        .param("id", "1"))  // Se necessário, ajuste os parâmetros
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.status", is(HttpStatus.BAD_REQUEST.toString())))
                .andExpect(jsonPath("$.errors[0]", is(errorMessage)));
    }

    @Test
    void testHandleInternal_RuntimeException() throws Exception {
        // Simula o lançamento de RuntimeException
        String errorMessage = "Internal server error";
        mockMvc.perform(get("/some-endpoint") // Substitua com um endpoint válido
                        .param("id", "1"))  // Se necessário, ajuste os parâmetros
                .andExpect(status().isInternalServerError())
                .andExpect(jsonPath("$.status", is(HttpStatus.INTERNAL_SERVER_ERROR.toString())))
                .andExpect(jsonPath("$.errors[0]", is(errorMessage)));
    }

    @Test
    void testHandleNotFound_ResourceNotFoundException() throws Exception {
        // Simula o lançamento de ResourceNotFoundException
        String errorMessage = "Resource not found";
        mockMvc.perform(get("/some-endpoint") // Substitua com um endpoint válido
                        .param("id", "999")) // ID não encontrado
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$.status", is(HttpStatus.NOT_FOUND.toString())))
                .andExpect(jsonPath("$.errors[0]", is(errorMessage)));
    }

    @Test
    void testHandleBadRequest_MethodArgumentNotValidException() throws Exception {
        // Simula o lançamento de MethodArgumentNotValidException
        mockMvc.perform(get("/some-endpoint") // Substitua com um endpoint válido
                        .param("invalidParam", "invalidValue")) // Parâmetro inválido
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.status", is(HttpStatus.BAD_REQUEST.toString())))
                .andExpect(jsonPath("$.errors", is(List.of("Invalid parameter value")))); // Ajuste a mensagem conforme esperado
    }
}
